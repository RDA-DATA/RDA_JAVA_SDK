<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sds.ocp</groupId>
		<artifactId>biot-device-sdk-java-pom</artifactId>
		<version>2.9.0-RELEASE</version>
	</parent>

	<artifactId>biot-device-sdk-java</artifactId>
	<packaging>jar</packaging>

	<name>Brightics IoT Device SDK</name>
	<description>Brighitcs IoT Device Software Development Kit for Java</description>

	<organization>
		<name>Samsung SDS</name>
		<url>http://www.sds.samsung.co.kr/</url>
	</organization>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<!-- MANIFEST TIMESTAMP -->
		<maven.build.timestamp.format>yyMMdd-HH</maven.build.timestamp.format>
		<build-datetime>${maven.build.timestamp}</build-datetime>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.eclipse.paho</groupId>
			<artifactId>org.eclipse.paho.client.mqttv3</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>

		<dependency>
			<groupId>com.github.luben</groupId>
			<artifactId>zstd-jni</artifactId>
			<version>1.3.8-3</version>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>

		<!-- for date format -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!-- for logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>
				
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<!-- TEST DEPENDENCIES -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<!--	Plugin 'org.apache.maven.plugins:maven-jxr-plugin:2.5' not found 문제 해결	-->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-site-plugin</artifactId>
			<version>3.3</version>
			<type>maven-plugin</type>
		</dependency>

		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-install-plugin</artifactId>
			<version>2.4</version>
			<type>maven-plugin</type>
		</dependency>

		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-deploy-plugin</artifactId>
			<version>2.7</version>
			<type>maven-plugin</type>
		</dependency>
		<!--	Plugin 'org.apache.maven.plugins:maven-jxr-plugin:2.5' not found 문제 해결	-->

	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<skipAssembly>false</skipAssembly>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>create-archive</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.1</version>
				<configuration>
					<attach>true</attach>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
				<executions>
					<execution>
						<id>default-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</execution>
				</executions>
				<!--configuration><skipTests>true</skipTests></configuration-->
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.2</version>
				<configuration>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<skipAssembly>true</skipAssembly>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>create-archive</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.14</version> <!-- 1.9 버전부터는 https PKIX 오류 발생 가능 -->
				<configuration>
					<!-- SKIP = IGNORE -->
					<skipDownloadLicenses>true</skipDownloadLicenses>
					<excludedScopes>system,test</excludedScopes>
					<licensesOutputFile>${project.build.directory}/generated-resources/licenses/licenses.xml</licensesOutputFile>
				</configuration>
				<executions>
					<execution> <!-- maven 3.0.4 ~ 3.3.9 (최신)버전 까지는 해당 기능 수행 시 deploy 시 403 FORBIDDEN 발생 -->
						<id>download-licenses</id>
						<goals>
							<goal>download-licenses</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- start of Proguard obfuscation -->
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.0.14</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- SKIP = IGNORE -->
					<skip>true</skip>
					<obfuscate>true</obfuscate>
					<injar>${project.build.finalName}.jar</injar>
					<outjar>${project.build.finalName}-obfuscation.jar</outjar>
					<outputDirectory>${project.build.directory}</outputDirectory>
					<injarNotExistsSkip>true</injarNotExistsSkip>
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jsse.jar</lib>
						<lib>${java.home}/lib/jce.jar</lib>
					</libs>
					<!-- <proguardInclude>${basedir}/conf/proguard.conf</proguardInclude> -->
					<options>
						<option>-target 1.8</option>
						<option>-keeppackagenames org.apache.maven.plugin.my.MyMojo</option>
						<option>-keepnames class * implements org.apache.maven.plugin.AbstractMojo</option>
						<option>-verbose</option> <!-- view log -->
						<option>-keepparameternames</option>
						<option>-keepdirectories</option>
						<option>-dontshrink</option>
						<option>-dontoptimize</option>
						<option>-keepattributes InnerClasses</option>
						<option>-keepattributes *Annotation*</option>
						<option>-keepattributes Signature</option>
						<option>-keep public class * {public protected *;}
						</option>
						<option>-keepclassmembers
							class * implements org.apache.maven.plugin.AbstractMojo {
							private <![CDATA[<fields>]]>;
							private <![CDATA[<methods>]]>;
							}
						</option>
						<option>-keepclassmembernames class * {
							java.lang.Class class$(java.lang.String);
							java.lang.Class class$(java.lang.String, boolean);
							}
						</option>
						<option>-keepclasseswithmembernames,includedescriptorclasses
							class * {
							native <![CDATA[<methods>]]>;
							}
						</option>
					</options>

					<exclusions>
						<exclusion>
							<groupId>org.eclipse.californium</groupId>
						</exclusion>
						<exclusion>
							<groupId>com.google.code.gson</groupId>
						</exclusion>
						<exclusion>
							<groupId>com.fasterxml.jackson.core</groupId>
						</exclusion>
						<exclusion>
							<groupId>io.netty</groupId>
						</exclusion>
						<exclusion>
							<groupId>commons-codec</groupId>
						</exclusion>
						<exclusion>
							<groupId>ch.qos.logback</groupId>
						</exclusion>
					</exclusions>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>5.2.1</version> <!--	5.2 not found so 5.2.1 로 해결	-->
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>
			<!-- end of Proguard obfuscation -->

			<!-- unit test coverage tool - jacoco -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<!-- <version>0.7.4.201502262128</version> -->
				<version>0.7.5.201505241946</version>
				<executions>
					<!-- pre-unit-test execution helps setting up some maven property, which will be used later by JaCoCo -->
					<execution>
						<id>pre-unit-test</id>
						<phase>compile</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- report phase setup -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- output file with report data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- output directory for the reports. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<!-- line coverage minimum of 50% for every class except test classes -->
								<rule>
									<element>CLASS</element>
									<excludes>
										<exclude>*Test.*</exclude>
									</excludes>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.50</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- reporting config. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<skip>true</skip>
					<encoding>utf8</encoding>
					<docencoding>utf8</docencoding>
					<charset>utf8</charset>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>${spotbugs-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>
		</plugins>
	</reporting>

</project>